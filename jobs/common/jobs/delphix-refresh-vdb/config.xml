<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VDB_NAME</name>
          <description>virtual database name to refresh</description>
          <defaultValue>&quot;&quot;</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>#!/usr/bin/python
import json
import uuid
import os
import sys
import redis

class RedisQueue(object):
    &quot;&quot;&quot;Simple Queue with Redis Backend&quot;&quot;&quot;
    def __init__(self, name, namespace=&apos;queue&apos;, **redis_kwargs):
        &quot;&quot;&quot;The default connection parameters are: host=&apos;localhost&apos;, port=6379, db=0&quot;&quot;&quot;
        self.__db = redis.Redis(**redis_kwargs)
        self.key = &apos;%s:%s&apos; %(namespace, name)

    def qsize(self):
        &quot;&quot;&quot;Return the approximate size of the queue.&quot;&quot;&quot;
        return self.__db.llen(self.key)

    def empty(self):
        &quot;&quot;&quot;Return True if the queue is empty, False otherwise.&quot;&quot;&quot;
        return self.qsize() == 0

    def put(self, item):
        &quot;&quot;&quot;Put item into the queue.&quot;&quot;&quot;
        self.__db.rpush(self.key, item)

    def get(self, block=True, timeout=None):
        &quot;&quot;&quot;Remove and return an item from the queue.
        If optional args block is true and timeout is None (the default), block
        if necessary until an item is available.&quot;&quot;&quot;
        if block:
            item = self.__db.blpop(self.key, timeout=timeout)
        else:
            item = self.__db.lpop(self.key)

        if item:
            item = item[1]
        return item

    def get_nowait(self):
        &quot;&quot;&quot;Equivalent to get(False).&quot;&quot;&quot;
        return self.get(False)
response_id = str(uuid.uuid4())

container_env = {}

q = RedisQueue(&apos;messages&apos;, namespace=&apos;ansible&apos;, host=&apos;internal-redis.ovmdvp.0001.use2.cache.amazonaws.com&apos;, port=6379, db=1)
q.put(json.dumps({
                &apos;job&apos;: os.environ[&apos;JOB_NAME&apos;],
                &apos;build_id&apos;: os.environ[&apos;BUILD_ID&apos;],
                &apos;call_id&apos;: 0,
                &apos;action&apos;: &apos;run_playbook&apos;,
                &apos;playbook&apos;: &apos;delphix_refresh_vdb&apos;,
                &apos;response_id&apos;: response_id
        }))

q = RedisQueue(response_id, namespace=&apos;ansible&apos;, host=&apos;internal-redis.ovmdvp.0001.use2.cache.amazonaws.com&apos;, port=6379, db=1)

is_success = False

while True:
        log = q.get()
        message = json.loads(log)
        print message[&apos;payload&apos;].encode(&apos;utf-8&apos;).strip()

        if message[&apos;type&apos;] == &apos;end&apos;:
                break
        else:
                if &quot;failed=0&quot; in message[&apos;payload&apos;] and &quot;unreachable=0&quot; in message[&apos;payload&apos;]:
                        is_success = True

if not is_success:
        sys.exit(1)</command>
    </hudson.plugins.python.Python>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.7">
      <template>${VDB_NAME}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>